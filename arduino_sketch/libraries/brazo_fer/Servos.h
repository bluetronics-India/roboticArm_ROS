// Generated by gencpp from file brazo_fer/Servos.msg
// DO NOT EDIT!


#ifndef BRAZO_FER_MESSAGE_SERVOS_H
#define BRAZO_FER_MESSAGE_SERVOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace brazo_fer
{
template <class ContainerAllocator>
struct Servos_
{
  typedef Servos_<ContainerAllocator> Type;

  Servos_()
    : base(0)
    , arti1(0)
    , arti2(0)
    , arti3(0)
    , pinza(0)  {
    }
  Servos_(const ContainerAllocator& _alloc)
    : base(0)
    , arti1(0)
    , arti2(0)
    , arti3(0)
    , pinza(0)  {
    }



   typedef int16_t _base_type;
  _base_type base;

   typedef int16_t _arti1_type;
  _arti1_type arti1;

   typedef int16_t _arti2_type;
  _arti2_type arti2;

   typedef int16_t _arti3_type;
  _arti3_type arti3;

   typedef int16_t _pinza_type;
  _pinza_type pinza;




  typedef boost::shared_ptr< ::brazo_fer::Servos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brazo_fer::Servos_<ContainerAllocator> const> ConstPtr;

}; // struct Servos_

typedef ::brazo_fer::Servos_<std::allocator<void> > Servos;

typedef boost::shared_ptr< ::brazo_fer::Servos > ServosPtr;
typedef boost::shared_ptr< ::brazo_fer::Servos const> ServosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brazo_fer::Servos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brazo_fer::Servos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace brazo_fer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'brazo_fer': ['/home/eeit/roboarm/catkin_ws/src/brazo_fer/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::brazo_fer::Servos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brazo_fer::Servos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brazo_fer::Servos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brazo_fer::Servos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brazo_fer::Servos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brazo_fer::Servos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brazo_fer::Servos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6be90daad19b44888c6ef8582506a939";
  }

  static const char* value(const ::brazo_fer::Servos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6be90daad19b4488ULL;
  static const uint64_t static_value2 = 0x8c6ef8582506a939ULL;
};

template<class ContainerAllocator>
struct DataType< ::brazo_fer::Servos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brazo_fer/Servos";
  }

  static const char* value(const ::brazo_fer::Servos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brazo_fer::Servos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 base\n\
int16 arti1\n\
int16 arti2\n\
int16 arti3\n\
int16 pinza\n\
";
  }

  static const char* value(const ::brazo_fer::Servos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brazo_fer::Servos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base);
      stream.next(m.arti1);
      stream.next(m.arti2);
      stream.next(m.arti3);
      stream.next(m.pinza);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Servos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brazo_fer::Servos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brazo_fer::Servos_<ContainerAllocator>& v)
  {
    s << indent << "base: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base);
    s << indent << "arti1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arti1);
    s << indent << "arti2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arti2);
    s << indent << "arti3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arti3);
    s << indent << "pinza: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pinza);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAZO_FER_MESSAGE_SERVOS_H
