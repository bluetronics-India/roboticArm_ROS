/* Auto-generated by genmsg_cpp for file /home/eeit/roboarm/ros_ws/brazo_fer/msg/ReadServos.msg */
#ifndef BRAZO_FER_MESSAGE_READSERVOS_H
#define BRAZO_FER_MESSAGE_READSERVOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "brazo_fer/Servos.h"
#include "brazo_fer/Servos.h"
#include "brazo_fer/Servos.h"

namespace brazo_fer
{
template <class ContainerAllocator>
struct ReadServos_ {
  typedef ReadServos_<ContainerAllocator> Type;

  ReadServos_()
  : posicion()
  , estado()
  , corriente()
  {
  }

  ReadServos_(const ContainerAllocator& _alloc)
  : posicion(_alloc)
  , estado(_alloc)
  , corriente(_alloc)
  {
  }

  typedef  ::brazo_fer::Servos_<ContainerAllocator>  _posicion_type;
   ::brazo_fer::Servos_<ContainerAllocator>  posicion;

  typedef  ::brazo_fer::Servos_<ContainerAllocator>  _estado_type;
   ::brazo_fer::Servos_<ContainerAllocator>  estado;

  typedef  ::brazo_fer::Servos_<ContainerAllocator>  _corriente_type;
   ::brazo_fer::Servos_<ContainerAllocator>  corriente;


  typedef boost::shared_ptr< ::brazo_fer::ReadServos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brazo_fer::ReadServos_<ContainerAllocator>  const> ConstPtr;
}; // struct ReadServos
typedef  ::brazo_fer::ReadServos_<std::allocator<void> > ReadServos;

typedef boost::shared_ptr< ::brazo_fer::ReadServos> ReadServosPtr;
typedef boost::shared_ptr< ::brazo_fer::ReadServos const> ReadServosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::brazo_fer::ReadServos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::brazo_fer::ReadServos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace brazo_fer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::brazo_fer::ReadServos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::brazo_fer::ReadServos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::brazo_fer::ReadServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb601df5ba86278a5ceaf5eea9e7da64";
  }

  static const char* value(const  ::brazo_fer::ReadServos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb601df5ba86278aULL;
  static const uint64_t static_value2 = 0x5ceaf5eea9e7da64ULL;
};

template<class ContainerAllocator>
struct DataType< ::brazo_fer::ReadServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "brazo_fer/ReadServos";
  }

  static const char* value(const  ::brazo_fer::ReadServos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::brazo_fer::ReadServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Servos posicion\n\
Servos estado\n\
Servos corriente\n\
\n\
================================================================================\n\
MSG: brazo_fer/Servos\n\
int16 base\n\
int16 arti1\n\
int16 arti2\n\
int16 arti3\n\
int16 pinza\n\
\n\
";
  }

  static const char* value(const  ::brazo_fer::ReadServos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::brazo_fer::ReadServos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::brazo_fer::ReadServos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.posicion);
    stream.next(m.estado);
    stream.next(m.corriente);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReadServos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brazo_fer::ReadServos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::brazo_fer::ReadServos_<ContainerAllocator> & v) 
  {
    s << indent << "posicion: ";
s << std::endl;
    Printer< ::brazo_fer::Servos_<ContainerAllocator> >::stream(s, indent + "  ", v.posicion);
    s << indent << "estado: ";
s << std::endl;
    Printer< ::brazo_fer::Servos_<ContainerAllocator> >::stream(s, indent + "  ", v.estado);
    s << indent << "corriente: ";
s << std::endl;
    Printer< ::brazo_fer::Servos_<ContainerAllocator> >::stream(s, indent + "  ", v.corriente);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BRAZO_FER_MESSAGE_READSERVOS_H

