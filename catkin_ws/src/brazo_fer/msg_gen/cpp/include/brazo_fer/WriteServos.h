/* Auto-generated by genmsg_cpp for file /home/eeit/roboarm/ros_ws/brazo_fer/msg/WriteServos.msg */
#ifndef BRAZO_FER_MESSAGE_WRITESERVOS_H
#define BRAZO_FER_MESSAGE_WRITESERVOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "brazo_fer/Servos.h"
#include "brazo_fer/Servos.h"
#include "brazo_fer/Servos.h"

namespace brazo_fer
{
template <class ContainerAllocator>
struct WriteServos_ {
  typedef WriteServos_<ContainerAllocator> Type;

  WriteServos_()
  : posicion()
  , velocidad()
  , par()
  {
  }

  WriteServos_(const ContainerAllocator& _alloc)
  : posicion(_alloc)
  , velocidad(_alloc)
  , par(_alloc)
  {
  }

  typedef  ::brazo_fer::Servos_<ContainerAllocator>  _posicion_type;
   ::brazo_fer::Servos_<ContainerAllocator>  posicion;

  typedef  ::brazo_fer::Servos_<ContainerAllocator>  _velocidad_type;
   ::brazo_fer::Servos_<ContainerAllocator>  velocidad;

  typedef  ::brazo_fer::Servos_<ContainerAllocator>  _par_type;
   ::brazo_fer::Servos_<ContainerAllocator>  par;


  typedef boost::shared_ptr< ::brazo_fer::WriteServos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brazo_fer::WriteServos_<ContainerAllocator>  const> ConstPtr;
}; // struct WriteServos
typedef  ::brazo_fer::WriteServos_<std::allocator<void> > WriteServos;

typedef boost::shared_ptr< ::brazo_fer::WriteServos> WriteServosPtr;
typedef boost::shared_ptr< ::brazo_fer::WriteServos const> WriteServosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::brazo_fer::WriteServos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::brazo_fer::WriteServos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace brazo_fer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::brazo_fer::WriteServos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::brazo_fer::WriteServos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::brazo_fer::WriteServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9551946156ffa6c4d13c8c60abd574c1";
  }

  static const char* value(const  ::brazo_fer::WriteServos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9551946156ffa6c4ULL;
  static const uint64_t static_value2 = 0xd13c8c60abd574c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::brazo_fer::WriteServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "brazo_fer/WriteServos";
  }

  static const char* value(const  ::brazo_fer::WriteServos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::brazo_fer::WriteServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Servos posicion\n\
Servos velocidad\n\
Servos par\n\
\n\
================================================================================\n\
MSG: brazo_fer/Servos\n\
int16 base\n\
int16 arti1\n\
int16 arti2\n\
int16 arti3\n\
int16 pinza\n\
\n\
";
  }

  static const char* value(const  ::brazo_fer::WriteServos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::brazo_fer::WriteServos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::brazo_fer::WriteServos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.posicion);
    stream.next(m.velocidad);
    stream.next(m.par);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WriteServos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brazo_fer::WriteServos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::brazo_fer::WriteServos_<ContainerAllocator> & v) 
  {
    s << indent << "posicion: ";
s << std::endl;
    Printer< ::brazo_fer::Servos_<ContainerAllocator> >::stream(s, indent + "  ", v.posicion);
    s << indent << "velocidad: ";
s << std::endl;
    Printer< ::brazo_fer::Servos_<ContainerAllocator> >::stream(s, indent + "  ", v.velocidad);
    s << indent << "par: ";
s << std::endl;
    Printer< ::brazo_fer::Servos_<ContainerAllocator> >::stream(s, indent + "  ", v.par);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BRAZO_FER_MESSAGE_WRITESERVOS_H

